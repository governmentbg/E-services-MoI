import React from 'react';
import { AsyncUIProps, BaseProps, withAsyncFrame } from 'cnsys-ui-react';
import { EAUBaseComponent, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, appConfig } from 'eau-core';
import { SelectListItem } from 'cnsys-core';
import { observer } from 'mobx-react';
import { observable } from 'mobx';
import { ANDObligationSearchCriteria, DocTypes } from '../../models/ModelsAutoGenerated';

interface KatObligationsProps extends BaseProps, AsyncUIProps {
    validators: any;
}

@observer class KatObligationsFormByActImpl extends EAUBaseComponent<KatObligationsProps, ANDObligationSearchCriteria>{

    private allowedDocumenSeries: SelectListItem[] = [];

    @observable isLoaded = false;

    constructor(props: KatObligationsProps) {
        super(props);

        this.validators = this.props.validators;

        if (appConfig.possibleKATObligationsFishSeries && appConfig.possibleKATObligationsFishSeries.length > 0) {
            appConfig.possibleKATObligationsFishSeries.forEach(element => {
                this.allowedDocumenSeries.push(new SelectListItem({ text: element, value: element }))
            });
        }
    }

    /**
     * Генерира списък за селект с типове на документ
     */
    getDocumentType() {
        return [
            new SelectListItem({ text: this.getResource("GL_TICKET_L"), value: DocTypes.Fish }),
            new SelectListItem({ text: this.getResource("GL_PENAL_DECREE_SHORT_L"), value: DocTypes.NP })
        ]
    }

    /**
     * При смяна на тип на документ занулява избора на серия.
     */
    onChangeDocumentType() {
        this.model.documentSeries = null;
    }

    render() {
        let documentSeries = <div></div>;

        // Спрямо избора на тип на документ полето серия е select или input
        switch (Number(this.model.documentType)) {
            case DocTypes.Fish:
                documentSeries = <div className="form-group col-sm-6 col-md-2 col-lg-2">
                    {this.labelFor(m => m.documentSeries, "GL_DOCUMENT_SERIES_L", attributesClassFormControlRequiredLabel)}
                    {this.dropDownListFor(m => m.documentSeries, this.allowedDocumenSeries, null, null, true, this.getResource("GL_CHOICE_L"))}
                </div>
                break;

            case DocTypes.AUAN:
                documentSeries = <div className="form-group col-sm-6 col-md-2 col-lg-2">
                    {this.labelFor(m => m.documentSeries, "GL_DOCUMENT_SERIES_L", attributesClassFormControlRequiredLabel)}
                    {this.textBoxFor(m => m.documentSeries, attributesClassFormControlReqired)}
                </div>
                break;
        }

        let result = this.allowedDocumenSeries && this.allowedDocumenSeries.length > 0
            ? <>
                <div className="form-group col-sm-6 col-md-2 col-lg-2">
                    {this.labelFor(m => m.documentType, "GL_DOCUMENT_TYPE_L", attributesClassFormControlRequiredLabel)}
                    {this.dropDownListFor(m => m.documentType, this.getDocumentType(), null, () => this.onChangeDocumentType(), true, this.getResource("GL_CHOICE_L"))}
                </div>
                {documentSeries}
                <div className="form-group col-sm-6 col-md-4 col-lg-3">
                    {this.labelFor(m => m.documentNumber, "GL_DOCUMENT_NUMBER_L", attributesClassFormControlRequiredLabel)}
                    {this.textBoxFor(m => m.documentNumber, attributesClassFormControlReqired)}
                </div>

                <div className="form-group col-sm-6 col-md-4 col-lg-3">
                    {this.labelFor(m => m.amount, "GL_AMOUNT_BGN_L", attributesClassFormControlRequiredLabel)}
                    {this.amountFor(m => m.amount, attributesClassFormControlReqired)}
                </div>
            </>
            : null;

        return result;
    }
}

export const KatObligationsFormByActUI = withAsyncFrame(KatObligationsFormByActImpl)