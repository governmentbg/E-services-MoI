import * as React from 'react';
import { AsyncUIProps, BaseProps, withAsyncFrame, withRouter, BaseRouteProps } from 'cnsys-ui-react';
import { EAUBaseComponent, ValidationSummaryErrors, Constants, Nomenclatures } from 'eau-core';
import { observer } from 'mobx-react';
import { action, observable, runInAction } from 'mobx';
import { BasePagedSearchCriteria } from 'cnsys-core';
import { KatObligationsFormUI } from './KatObligationsFormUI';
import { KatObligationsResultsUI } from './KatObligationsResultsUI';
import { ObligationsDataService } from '../../services/ObligationsDataService';
import { Obligation, ANDObligationSearchCriteria } from '../../models/ModelsAutoGenerated';

interface KatObligationsProps extends BaseRouteProps<any>, BaseProps, AsyncUIProps {

}

@observer class KatObligationsUIImpl extends EAUBaseComponent<KatObligationsProps, BasePagedSearchCriteria>{

    @observable isSearchFormProcessSuccess: boolean = false;
    @observable ANDObligationsList: Obligation[] = [];
    @observable hasNonHandedSlip: boolean;
    @observable errorOnHasNonHandedSlip: boolean;
    @observable errorNoDataFound: boolean;
    @observable isLoaded: boolean;
    @observable searchCriteria;
    @observable service;

    @observable querySearchParams: ANDObligationSearchCriteria = null;

    private obligationDataService: ObligationsDataService;

    constructor(props: KatObligationsProps) {
        super(props);

        this.obligationDataService = new ObligationsDataService();

        // binds
        this.callbackFormProccessStatus = this.callbackFormProccessStatus.bind(this);
        this.getSearchResult = this.getSearchResult.bind(this);
        this.getService = this.getService.bind(this);
        this.getSearchResult();
        this.getService();
    }

    /**
     * Взима данни за услугата
     */
    getService() {

        let serviceURL = window.location.pathname;

        Nomenclatures.getServices()
            .then(res => {
                if (res && res.length > 0) {
                    res.find(service => {
                        if (service.serviceUrl == serviceURL)
                            this.service = service;
                    })
                }
            })
    }


    @action getSearchResult() {

        let search = window.location.search;
        let params = new URLSearchParams(search);

        this.querySearchParams = new ANDObligationSearchCriteria();

        params.forEach((value, key) => {
            if (this.querySearchParams.hasOwnProperty('_' + key))
                this.querySearchParams['_' + key] = value;
        });
    }

    /**
     * Връща резултат от търсене по СУМПС или ФИШ/АУАН/НП
     * @param staus 
     * @param criteria 
     */
    @action callbackFormProccessStatus(staus, criteria?: ANDObligationSearchCriteria) {

        this.isSearchFormProcessSuccess = staus;
        this.ANDObligationsList = [];

        this.props.history.push(Constants.PATHS.KAT_OBLIGATIONS, {});
        this.querySearchParams = null;
        this.isLoaded = false;
        this.hasNonHandedSlip = undefined;
        this.errorOnHasNonHandedSlip = undefined;

        if (criteria) {
            this.props.registerAsyncOperation(
                this.obligationDataService.searchObligationsAND(criteria)
                    .then(result => {

                        runInAction.bind(this)(() => {
                            this.hasNonHandedSlip = result.hasNonHandedSlip;
                            this.errorOnHasNonHandedSlip = result.errorOnHasNonHandedSlip;


                            let sortArray = [];

                            // Задължението, за което има намерени данни, трябва да е на първо място в списъка
                            result.obligations.forEach((obligation) => {
                                if (obligation.additionalData.hasOwnProperty('isMainDocument'))
                                    obligation.additionalData.isMainDocument.toLowerCase() == "true" ? sortArray.unshift(obligation) : sortArray.push(obligation);
                                else
                                    sortArray.push(obligation)
                            });

                            this.ANDObligationsList = sortArray;
                            this.searchCriteria = criteria;
                            this.isLoaded = true;
                        });

                    })
            )
        }
    }

    render() {

        let result;

        if (this.isSearchFormProcessSuccess && this.isLoaded && this.ANDObligationsList.length > 0) {
            result = <KatObligationsResultsUI
                callbackFormProccessStatus={this.callbackFormProccessStatus}
                ANDObligationsList={this.ANDObligationsList}
                searchCriteria={this.searchCriteria}
                hasNonHandedSlip={this.hasNonHandedSlip}
                errorOnHasNonHandedSlip={this.errorOnHasNonHandedSlip}
            />
        }
        else {
            result = <>
                {  this.isSearchFormProcessSuccess && this.isLoaded ?
                    <div className="alert alert-warning mt-0 mb-4">
                        <p> {this.getResource("GL_KAT_OBLIGATION_RESULT_005_I")} </p>
                    </div>
                    : ""
                }
                {
                    this.errorOnHasNonHandedSlip === true ?
                        <div className="alert alert-warning mt-4" role="alert"><p>{this.getResource("GL_UNDELIVERED_DEBTS_E")}</p></div>
                        :
                        this.isSearchFormProcessSuccess && this.isLoaded ?
                            this.hasNonHandedSlip ?
                                <div className="alert alert-warning mt-0 mb-4">                                   
                                    <p> {this.getResource("GL_KAT_OBLIGATION_RESULT_003_I")} </p>
                                </div>
                                :
                                <div className="alert alert-warning mt-0 mb-4">                                   
                                    <p> {this.getResource("GL_KAT_OBLIGATION_RESULT_002_I")} </p>
                                </div>
                            : ""

                }

                <div className="w-100" dangerouslySetInnerHTML={{ __html: (this.service && this.service.description) && this.service.description }}></div>

                <KatObligationsFormUI
                    callbackFormProccessStatus={this.callbackFormProccessStatus}
                    querySearchParams={this.querySearchParams}
                />
            </>
        }

        return <>

            <div className="page-wrapper" id="ARTICLE-CONTENT">
                <div className="ui-form ui-form--input">
                    <ValidationSummaryErrors asyncErrors={this.props.asyncErrors} />
                    {result}
                </div>
            </div>
        </>
    }
}

export const KatObligationsUI = withRouter(withAsyncFrame(KatObligationsUIImpl, false))