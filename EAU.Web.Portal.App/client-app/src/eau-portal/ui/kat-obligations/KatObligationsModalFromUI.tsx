import { ObjectHelper, SelectListItem } from 'cnsys-core';
import { AsyncUIProps, BaseProps } from 'cnsys-ui-react';
import { attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent, attributesClassInlineRadioButtons, RegistrationDataTypes } from 'eau-core';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import React from 'react';
import { Button, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';
import { Obligation, ObligedPersonIdentTypes } from '../../models/ModelsAutoGenerated';
import { KatObligatedPersonValidator } from '../../validations/KatObligatedPersonValidator';

interface KatObligationsModalFromProps extends BaseProps, AsyncUIProps {
    model: Obligation;
    isOpen: boolean,
    toggleModal: () => any;
    obligation,
    callbackPayAction: (obligation: Obligation, registrationDataType?: number, withDiscount?: boolean, isPaymentSent?) => any;
    registrationDataType,
    withDiscount,
    modalType: number
}

const modalTypes = { form: 1, alert: 2 }

@observer class KatObligationsModalFromUIImpl extends EAUBaseComponent<KatObligationsModalFromProps, Obligation>{

    @observable modal: boolean;

    private selectedItems: SelectListItem[];

    constructor(props: KatObligationsModalFromProps) {
        super(props);

        this.model = new Obligation();
        this.model.obligedPersonIdentType = Number(ObligedPersonIdentTypes.EGN);
        this.validators = [new KatObligatedPersonValidator()];

        this.selectedItems = [
            new SelectListItem({
                value: ObligedPersonIdentTypes.EGN,
                text: this.getResource("GL_EGN_L").toUpperCase(),
                selected: ObjectHelper.isNullOrUndefined(this.model.obligedPersonIdentType)
            }),
            new SelectListItem({
                value: ObligedPersonIdentTypes.LNC,
                text: this.getResource("GL_LNCH_L").toUpperCase(),
                selected: this.model.obligedPersonIdentType === ObligedPersonIdentTypes.LNC
            }),
            new SelectListItem({
                value: ObligedPersonIdentTypes.BULSTAT,
                text: this.getResource("GL_UIC_BULSTAT_L").toUpperCase(),
                selected: this.model.obligedPersonIdentType === ObligedPersonIdentTypes.BULSTAT
            })
        ];

        this.onClickPayButton = this.onClickPayButton.bind(this);
        this.onClickNewPaymentRequest = this.onClickNewPaymentRequest.bind(this);

    }

    /**
     * Проверява за валидно попълнени данни в модала и инициира плащане.
     */
    @action onClickPayButton() {
        if (this.validators[0].validate(this.model)) {
            this.props.obligation.obligedPersonIdent = this.model.obligedPersonIdent;
            this.props.obligation.obligedPersonIdentType = this.model.obligedPersonIdentType;
            this.props.obligation.obligedPersonName = this.model.obligedPersonName;
            this.props.callbackPayAction(this.props.obligation, this.props.registrationDataType, this.props.withDiscount);
            this.props.toggleModal();
        }
    }

    /**
     * Създава нова заявка за плащане след съгласие от страна на потребителя.
     */
    @action onClickNewPaymentRequest() {
        this.props.callbackPayAction(this.props.obligation, this.props.registrationDataType, this.props.withDiscount);
        this.props.toggleModal();
    }

    render() {

        let result = <></>;

        switch (Number(this.props.modalType)) {

            case modalTypes.form:
                result = <Modal isOpen={this.props.isOpen} toggle={this.props.toggleModal} centered={true}>
                    <ModalHeader toggle={this.props.toggleModal}>{this.props.registrationDataType == RegistrationDataTypes.ePay ? this.getResource("GL_PAYMENT_EPAY_L") : this.getResource("GL_PAYMENT_PEPDAEU_L")}</ModalHeader>

                    <form>
                        <ModalBody>
                            <div className="ui-form ui-form--input mt-2">
                                <div className="row">
                                    <div className="alert alert-info" role="alert"> <p>{this.getResource('GL_INPUT_LIABLE_PERSON_DATA_I')}</p></div>
                                </div>
                                <div className="row">
                                    <div className="form-group col-md-6">
                                        {this.labelFor(m => m.obligedPersonName, "GL_OBLIGED_PERSON_NAME_L", attributesClassFormControlRequiredLabel)}
                                        {this.textBoxFor(m => m.obligedPersonName, attributesClassFormControlReqired)}
                                    </div>
                                </div>

                                <div className="row">
                                    <div className="col">
                                        {this.labelFor(m => m.obligedPersonIdent, "GL_OBLIGED_PERSON_IDENTIFIER_L", attributesClassFormControlRequiredLabel)}
                                    </div>
                                </div>

                                <div className="row">
                                    <div className="form-group col-sm-6">
                                        {this.textBoxFor(m => m.obligedPersonIdent, attributesClassFormControlReqired)}
                                    </div>

                                    <div className="form-group col-auto">
                                        <div className="form-inline">
                                            {this.radioButtonListFor(m => m.obligedPersonIdentType, this.selectedItems, attributesClassInlineRadioButtons)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </ModalBody>
                        <ModalFooter>
                            <div className="button-bar button-bar--responsive">
                                <div className="right-side">
                                    <Button color="primary" onClick={this.onClickPayButton}>{this.getResource("GL_PAY_L")}</Button>
                                </div>

                                <div className="left-side">
                                    <Button color="secondary" onClick={this.props.toggleModal}>{this.getResource("GL_CLOSE_L")}</Button>
                                </div>
                            </div>
                        </ModalFooter>
                    </form>
                </Modal>
                break;

            case modalTypes.alert:

                result = <Modal isOpen={this.props.isOpen} toggle={this.props.toggleModal} centered={true}>
                    <ModalHeader toggle={this.props.toggleModal}>{this.getResource("GL_PAYMENT_EPAY_L")}</ModalHeader>
                    <ModalBody>

                        <div className="alert alert-warning">
                            <p>{this.getResource("GL_EPAY_STATUS_SENT_CONFIRM_I")}</p>
                        </div>
                    </ModalBody>
                    <ModalFooter>
                        <div className="button-bar button-bar--responsive">
                            <div className="right-side">
                                <Button color="primary" onClick={this.onClickNewPaymentRequest}>{this.getResource("GL_EPAY_NEW_REQUEST_L")}</Button>
                            </div>

                            <div className="left-side">
                                <Button color="secondary" onClick={this.props.toggleModal}>{this.getResource("GL_REFUSE_L")}</Button>
                            </div>
                        </div>
                    </ModalFooter>
                </Modal>

                break;
        }

        return result;
    }

}

export const KatObligationsModalFromUI = KatObligationsModalFromUIImpl