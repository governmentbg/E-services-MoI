import { EAUBaseValidator, resourceManager } from "eau-core";
import { ANDObligationSearchCriteria, ANDObligationSearchMode, DocTypes } from "../models/ModelsAutoGenerated";
import { ObjectHelper } from "cnsys-core";


export class KatObligationsValidator extends EAUBaseValidator<ANDObligationSearchCriteria, any> {

    constructor() {
        super();
      
            // Търсене по ЕГН/ЛНЧ СУМПС
            this.ruleFor(m => m.drivingLicenceNumber).notEmpty().withMessage(resourceManager.getResourceByKey("GL_INPUT_FIELD_MUST_E"))
            .when(m=> m.mode == ANDObligationSearchMode.ObligedPerson);
           
            this.ruleFor(m => m.drivingLicenceNumber).matches('^2[0-9]{8}$').withMessage(resourceManager.getResourceByKey("GL_ENTER_VALID_NUMBER_E"))
            .when(m=> m.mode == ANDObligationSearchMode.ObligedPerson);
            
            this.ruleFor(m => m.obligedPersonIdent).notEmpty().withMessage(this.getMessage('GL_INPUT_FIELD_MUST_E'))
            .when(m=> m.mode == ANDObligationSearchMode.ObligedPerson);
            
            this.ruleFor(m => m.obligedPersonIdent)
            .isValidEGNLNCh().withMessage(resourceManager.getResourceByKey('GL_INVALID_EGNLNCH_L'))
            .when(m=> m.mode == ANDObligationSearchMode.ObligedPerson && !ObjectHelper.isNullOrUndefined(m.obligedPersonIdent) && m.obligedPersonIdent != '');
           
            
            // Търсене по ФИШ/АУАН/НП
            this.ruleFor(m => m.documentType).notEmpty().withMessage(resourceManager.getResourceByKey("GL_INPUT_FIELD_MUST_E"))
            .when(m=> m.mode == ANDObligationSearchMode.Document);

            this.ruleFor(m => m.documentSeries).matches('^[А-Я]+$').withMessage(this.getMessage('GL_ONLY_CYRILLIC_LETTERS_ALLOWED_E'))
            .when(m=> m.mode == ANDObligationSearchMode.Document && m.documentType == DocTypes.AUAN);

            this.ruleFor(m => m.documentSeries).notEmpty().withMessage(this.getMessage('GL_INPUT_FIELD_MUST_E'))
            .when(m=> m.mode == ANDObligationSearchMode.Document && m.documentType != DocTypes.NP);

            this.ruleFor(m => m.documentNumber).notEmpty().withMessage(this.getMessage('GL_INPUT_FIELD_MUST_E'))
            .when(m=> m.mode == ANDObligationSearchMode.Document);

            this.ruleFor(m => m.documentNumber).matches('^[0-9]+$').withMessage(this.getMessage('GL_ONLY_DIGITS_ALLOWED_E'))
            .when(m=> m.mode == ANDObligationSearchMode.Document && m.documentType == DocTypes.Fish || m.documentType == DocTypes.AUAN);

            this.ruleFor(m => m.documentNumber).matches('^[0-9]([0-9]|-(?!-))+$').withMessage(this.getMessage('GL_ONLY_DIGITS_DASH_ALLOWED_E'))
            .when(m=> m.mode == ANDObligationSearchMode.Document && m.documentType == DocTypes.NP);


            this.ruleFor(m => m.amount).notEmpty().withMessage(this.getMessage('GL_INPUT_FIELD_MUST_E'))
            .when(m=> m.mode == ANDObligationSearchMode.Document);

    }

    public validate(obj: ANDObligationSearchCriteria): boolean {

        let isValid = super.validate(obj);

        return isValid;
    }
}


