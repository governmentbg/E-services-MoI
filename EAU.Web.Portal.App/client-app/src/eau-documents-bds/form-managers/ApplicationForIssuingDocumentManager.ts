import { ObjectHelper } from 'cnsys-core';
import { ResourceHelpers } from 'eau-core';
import { ApplicationFormManagerBase, DocumentFormValidationContext, ElectronicServiceAuthorQualityType, PersonalInformationPreviewUI, PersonalInformationValidator, PersonalInformationVM, Section, ServiceResultReceiptMethods } from 'eau-documents';
import { action } from 'mobx';
import { ApplicationForIssuingDocumentDataVM, ApplicationForIssuingDocumentVM } from '../models/ModelsAutoGenerated';
import { ApplicationForIssuingDocumentDataUI } from '../ui/section-forms/ApplicationForIssuingDocumentDataUI';
import { ApplicationForIssuingDocumentDataValidator } from '../validations/ApplicationForIssuingDocumentDataValidator';

export class ApplicationForIssuingDocumentManager extends ApplicationFormManagerBase<ApplicationForIssuingDocumentVM>{

    private serviceResultReceiptMethodsFilter: ServiceResultReceiptMethods[];

    //#region ApplicationFormManagerBase

    protected createDocument(obj: any): ApplicationForIssuingDocumentVM {
        return new ApplicationForIssuingDocumentVM(obj);
    }

    //#endregion

    protected initDocumentForm() {
        super.initDocumentForm();

        if (!this.documentForm.circumstances)
            this.documentForm.circumstances = new ApplicationForIssuingDocumentDataVM();

        if (!this.documentForm.personalInformation)
            this.documentForm.personalInformation = new PersonalInformationVM();

        //Ако качеството в което се подава заявлението е "лично" и нямаме сетнат начин на получаване избираме дефолтно "Чрез електронна поща/уеб базирано приложение"
        if (ObjectHelper.isNullOrUndefined(this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.serviceResultReceiptMethod)
            && this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal) {

            this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.serviceResultReceiptMethod = ServiceResultReceiptMethods.EmailOrWebApplication;
        }

        this.defineServiceResultReceiptMethodsFilter(this.documentForm.electronicServiceApplicant.recipientGroup.authorWithQuality.selectedAuthorQuality)
    }

    protected createSections(validationContext: DocumentFormValidationContext): Section[] {
        var sections = super.createSections(validationContext);

        var personalInformation = new Section();
        personalInformation.code = "personalInformation";
        personalInformation.title = ResourceHelpers.getResourceByProperty(m => m.personalInformation, this.documentForm);
        personalInformation.form = this.documentForm.personalInformation;
        personalInformation.formUICmp = PersonalInformationPreviewUI;
        personalInformation.validator = new PersonalInformationValidator(true);
        personalInformation.validator.setValidationContext(validationContext);
        personalInformation.validate = () => this.validateSection(personalInformation);

        sections.splice(1, 0, personalInformation);

        var circumstances = new Section();
        circumstances.code = "circumstances";
        circumstances.title = ResourceHelpers.getResourceByProperty(m => m.circumstances, this.documentForm);
        circumstances.form = this.documentForm.circumstances;
        circumstances.formUICmp = ApplicationForIssuingDocumentDataUI;
        circumstances.validator = new ApplicationForIssuingDocumentDataValidator();
        circumstances.validator.setValidationContext(validationContext);
        circumstances.validate = () => this.validateSection(circumstances);

        sections.splice(2, 0, circumstances);

        return sections;
    }

    @action public changeAuthorQuality(qualityType: ElectronicServiceAuthorQualityType) {
        super.changeAuthorQuality(qualityType);

        if (qualityType == ElectronicServiceAuthorQualityType.Personal) 
            this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.serviceResultReceiptMethod = ServiceResultReceiptMethods.EmailOrWebApplication;

        this.defineServiceResultReceiptMethodsFilter(qualityType)
    }

    public get deliveryChannels() {
        if (this.serviceResultReceiptMethodsFilter && this.serviceResultReceiptMethodsFilter.length > 0) {

            let filteredDeliveryChannels = this.service?.deliveryChannels.filter((deliveryChannel) => {
                return this.serviceResultReceiptMethodsFilter.findIndex(index => index == deliveryChannel.deliveryChannelID) > -1
            });

            if (filteredDeliveryChannels && filteredDeliveryChannels.length > 0)
                this.documentForm.serviceTermTypeAndApplicantReceipt.serviceApplicantReceiptData.serviceResultReceiptMethod = filteredDeliveryChannels[0].deliveryChannelID;

            return filteredDeliveryChannels;
        } 

        return this.service?.deliveryChannels
    }

    //#region helpers

    private defineServiceResultReceiptMethodsFilter(qualityType: ElectronicServiceAuthorQualityType) {

        if (qualityType == ElectronicServiceAuthorQualityType.Representative)
            this.serviceResultReceiptMethodsFilter = [ServiceResultReceiptMethods.UnitInAdministration]
        else
            this.serviceResultReceiptMethodsFilter = [];
    }

    //#endregion
}