import { BaseProps, ViewMode } from "cnsys-ui-react";
import { attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, EAUBaseComponent, ResourceHelpers, ValidationSummary, ValidationSummaryStrategy } from "eau-core";
import { PersonIdentifierChoiceType, PersonNamesUI, PersonNames, ErrMsgCodesConstants } from "eau-documents";
import { action, runInAction } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { EntityDataVM, PersonDataVM, PersonEntityDataVM, PersonIdentifierVM, PersonEntityFarmerChoiceType } from "../../models/ModelsAutoGenerated";
import { ObjectHelper, ValidationHelper } from "cnsys-core";
import { RegiXDataService } from "eau-documents/services/RegiXDataService";
import { MOIDataService } from "eau-documents/services/MOIDataService";

interface VehicleOwnerOrHolderUIProps extends BaseProps {
    callBack?: (e: any) => void;
}


@observer export class VehicleOwnerOrHolderUI extends EAUBaseComponent<VehicleOwnerOrHolderUIProps, PersonEntityDataVM>{

    constructor(props?: any) {
        super(props);

        //Bind
        this.getData = this.getData.bind(this);
        this.handleChoiceTypeChange = this.handleChoiceTypeChange.bind(this);
        this.onChangeIdentType = this.onChangeIdentType.bind(this);

    }

    renderEdit(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label"> {this.labelFor(m => m.selectedPersonEntityFarmerChoiceType, null, attributesClassFormControlRequiredLabel)}</legend>
                            {this.radioButtonListFor(m => m.selectedPersonEntityFarmerChoiceType, ResourceHelpers.getSelectListItemsForEnum(PersonEntityFarmerChoiceType), null, this.handleChoiceTypeChange)}
                        </fieldset>
                    </div>
                </div>
                <div className="alert alert-info mt-0" id="HELP-FIZICHESKO">
                    {this.getResource("GL_PersonData_MustCheck_I")}
                </div>
                <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.includeAllExcept} />
                {this.renderEditContent()}
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.selectedChoiceType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.selectedPersonEntityFarmerChoiceType as number, PersonEntityFarmerChoiceType)}
                        <ValidationSummary model={this.model} {...this.props} strategy={ValidationSummaryStrategy.includeAllExcept} viewMode={ViewMode.Display} />
                    </div>
                    {this.renderDisplayContent()}
                </div>
            </>)

    }

    renderEditContent() {

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            return (
                <>
                    <div className="row">
                        <div className="col-12">
                            {this.labelFor(m => m.person.identifier, null, attributesClassFormControlRequiredLabel)}
                        </div>
                        <div className="form-group col-6 col-xl-4">
                            {this.textBoxFor(m => m.person.identifier.item, attributesClassFormControlReqired)}
                        </div>
                        <div className="form-group col-auto">
                            <fieldset className="form-inline">
                                <legend className="sr-only"></legend>
                                {this.radioButtonListFor(m => m.person.identifier.itemElementName, ResourceHelpers.getSelectListItemsForEnum(PersonIdentifierChoiceType), { className: "custom-control-inline custom-control custom-radio" }, this.onChangeIdentType)}
                            </fieldset>
                        </div>
                        <div className="form-group col-sm-12 col-md-auto">
                            <button className="btn btn-light" onClick={this.getData} type="button">
                                <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i>
                                {this.getResource('GL_CHECK_L')}
                            </button>
                        </div>
                    </div>
                </>
            )
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity) {
            return (
                <>
                    <div className="row">
                        <div className="col-12">
                            {this.labelFor(m => m.entity.identifier, null, attributesClassFormControlRequiredLabel)}
                        </div>
                        <div className="form-group col col-sm-6">
                            {this.textBoxFor(m => m.entity.identifier, attributesClassFormControlReqired)}
                        </div>
                        <div className="form-group col-auto">
                            <button className="btn btn-light" onClick={this.getData}>
                                <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i>
                                {this.getResource('GL_CHECK_L')}
                            </button>
                        </div>
                    </div>
                </>
            )
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            return (
                <>
                    <div className="row">
                        <div className="col-12">
                            <label htmlFor="entity" className="form-control-label required-field">{this.getResource("GL_BULSTAT_L").toUpperCase()}</label>
                        </div>
                        <div className="form-group col col-sm-6">
                            {this.textBoxFor(m => m.entity.identifier, attributesClassFormControlReqired)}
                        </div>
                        <div className="form-group col-auto">
                            <button className="btn btn-light" onClick={this.getData}>
                                <i className="ui-icon ui-icon-import mr-1" aria-hidden="true"></i>
                                {this.getResource('GL_CHECK_L')}
                            </button>
                        </div>
                    </div>
                </>
            )
        }
    }

    renderDisplayContent() {
        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            return (
                <>
                    <PersonNamesUI {...this.bind(m => m.person.names)} />
                    <div className="form-group col-sm-4">
                        <h4 className="form-control-label">{ResourceHelpers.getResourceByEmun(this.model.person.identifier.itemElementName as number, PersonIdentifierChoiceType)}</h4>
                        {this.textDisplay(this.model.person.identifier.item, this.model.person.identifier, "item")}
                    </div>
                </>
            )
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity) {
            return (
                <>
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResource("DOC_GL_EntityBasicData_name_L")}</h4>
                        {this.textDisplay(this.model.entity.name, this.model.entity, "name")}
                    </div>
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResource("DOC_GL_EntityBasicData_identifier_L")}</h4>
                        {this.textDisplay(this.model.entity.identifier, this.model.entity, "identifier")}
                    </div>
                </>
            )
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            return (
                <>
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResource("DOC_GL_EntityBasicData_name_L")}</h4>
                        {this.textDisplay(this.model.entity.name, this.model.entity, "name")}
                    </div>
                    <div className="form-group col-sm-6">
                        <h4 className="form-control-label">{this.getResource("GL_BULSTAT_L").toUpperCase()}</h4>
                        {this.textDisplay(this.model.entity.identifier, this.model.entity, "identifier")}
                    </div>
                </>
            )
        }
    }

    @action public handleChoiceTypeChange() {

        this.model.isFarmer = (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer ? true : false);

        if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            this.model.entity = undefined;

            if (!this.model.person) {
                this.model.person = new PersonDataVM();
                this.model.person.identifier = new PersonIdentifierVM();
                this.model.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
                this.model.person.validateIdentityNumber = true;
            } else
                this.model.person.identifier.itemElementName = PersonIdentifierChoiceType.EGN;
        }
        else if (this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Entity
            || this.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Farmer) {
            this.model.person = undefined;

            if (!this.model.entity)
                this.model.entity = new EntityDataVM();

            this.model.entity.clearErrors();
        }
        else {
            throw "Not supported recipientType."
        }
    }

    @action public onChangeIdentType() {
        this.model.person.identifier.clearErrors();
    }

    getData(e: any): void {
        let that = this;

        if (that.model.selectedPersonEntityFarmerChoiceType == PersonEntityFarmerChoiceType.Person) {
            that.model.person.identifier.clearErrors();
            if (that.model.person && that.model.person.identifier && !ObjectHelper.isStringNullOrEmpty(that.model.person.identifier.item)) {
                that.model.person.names = null;
                if ((that.model.person.identifier.itemElementName == PersonIdentifierChoiceType.EGN && ValidationHelper.isValidEGN(that.model.person.identifier.item)) ||
                    (that.model.person.identifier.itemElementName == PersonIdentifierChoiceType.LNCh && ValidationHelper.isValidLNCh(that.model.person.identifier.item))
                ) {
                    new MOIDataService().getPersonsInfo(that.model.person.identifier.item).then((personData) => {
                        runInAction(() => {
                            if (personData) {
                                that.model.person.names = new PersonNames();
                                that.model.person.names.first = personData.firstName.cyrillic;
                                that.model.person.names.middle = personData.surname.cyrillic;
                                that.model.person.names.last = personData.family.cyrillic;
                                if (this.props.callBack) {
                                    this.props.callBack(e);
                                }
                            }
                        });
                    })
                }
                else {
                    that.model.person.identifier.addError("item", that.model.person.identifier.itemElementName == PersonIdentifierChoiceType.EGN ? this.getResource(ErrMsgCodesConstants.InvalidEGN) : this.getResource(ErrMsgCodesConstants.InvalidLNCh));
                }
            }
            else {
                that.model.person.identifier.addError("item", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonDataVM(), 'identifier'));
            }

        }
        else {
            that.model.entity.clearErrors();
            if (that.model.entity && !ObjectHelper.isStringNullOrEmpty(that.model.entity.identifier)) {
                that.model.entity.name = null;
                new RegiXDataService().getEntityData(that.model.entity.identifier).then((entityData) => {
                    runInAction(() => {
                        if (entityData) {
                            that.model.entity.name = entityData.name;
                            if (this.props.callBack) {
                                this.props.callBack(e);
                            }
                        }
                    });
                })
            }
            else {
                if (that.model.isFarmer === true)
                    that.model.entity.addError('identifier', ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new EntityDataVM(), 'identifierBulstat'));
                else
                    that.model.entity.addError('identifier', ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new EntityDataVM(), 'identifier'));

            }
        }

        if ((that.model.person && that.model.person.identifier && !ObjectHelper.isStringNullOrEmpty(that.model.person.identifier.item) && ObjectHelper.isStringNullOrEmpty(that.model.person.names)) ||
            (that.model.entity && !ObjectHelper.isStringNullOrEmpty(that.model.entity.identifier) && ObjectHelper.isStringNullOrEmpty(that.model.entity.name))
        ) {
            that.model.clearErrors();
            that.model.addError(this.getResource("GL_NO_DATA_FOUND_L"));
        }
    }
}