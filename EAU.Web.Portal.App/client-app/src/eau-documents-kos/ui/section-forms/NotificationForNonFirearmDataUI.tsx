import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import { ApplicationFormManagerProps, ApplicationType, ElectronicServiceAuthorQualityType, FieldFormUI, PersonalInformationPreviewUI, PersonalInformationUI, PoliceDepartmentUI, withDocumentFormManager } from "eau-documents";
import { action } from "mobx";
import React from "react";
import { NotificationForNonFirearmDataVM, WeaponNoticeType } from "../../models/ModelsAutoGenerated";
import { TechnicalSpecificationsOfWeaponsUI } from "../field-forms/TechnicalSpecificationsOfWeaponsUI";

interface NotificationForNonFirearmDataProps extends BaseProps, ApplicationFormManagerProps {
}

export class NotificationForNonFirearmDataImpl
    extends EAUBaseComponent<NotificationForNonFirearmDataProps, NotificationForNonFirearmDataVM> {

    constructor(props: NotificationForNonFirearmDataProps) {
        super(props);

        this.onWeaponNoticeTypeChange = this.onWeaponNoticeTypeChange.bind(this);
    }

    renderEdit(): JSX.Element {
        return <>
            {
                this.props.documentFormManager.applicationType != ApplicationType.AppForFirstReg
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                        <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment, ViewMode.Display)} />
                    </FieldFormUI>
                    : <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)} required>
                        <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
                    </FieldFormUI>
            }
            {
                this.props.documentFormManager.getSelectedAuthorQuality == ElectronicServiceAuthorQualityType.Personal
                    ? <PersonalInformationPreviewUI {...this.bind(m => m.applicantInformation)} sectionTitle={this.getResourceByProperty(m => m.applicantInformation)} notRequiredPhone />
                    : <PersonalInformationUI {...this.bind(m => m.applicantInformation)}
                        addressInfoText={this.getResource("DOC_KOS_ADDRESS_TEXT_2_I")}
                        sectionTitle={this.getResourceByProperty(m => m.applicantInformation)}
                        required
                    />
            }
            <FieldFormUI title={this.getResourceByProperty(m => m.weaponNoticeType)}>
                {this.props.documentFormManager.applicationType != ApplicationType.AppForFirstReg ?
                    <div className="row">
                        <div className="form-group col-12">
                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.weaponNoticeType, WeaponNoticeType)}</p>
                        </div>
                    </div> :
                    this.radioButtonListFor(m => m.weaponNoticeType, ResourceHelpers.getSelectListItemsForEnum(WeaponNoticeType), null, this.onWeaponNoticeTypeChange)
                }
            </FieldFormUI>
            <FieldFormUI title={this.getResourceByProperty(m => m.technicalSpecificationsOfWeapons)}>
                <TechnicalSpecificationsOfWeaponsUI {...this.bind(m => m.technicalSpecificationsOfWeapons)} skipWeaponPurpose />
            </FieldFormUI>
            {
                this.model.weaponNoticeType == WeaponNoticeType.Transferred
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.purchaserInformation)} required>
                        {this.textAreaFor(x => x.purchaserInformation)}
                        {this.inlineHelpFor(m => m.purchaserInformation, 'DOC_KOS_NotificationForNonFirearmData_purchaserInformation_I')}
                    </FieldFormUI>
                    : null
            }
        </>
    }

    renderDisplay(): JSX.Element {
        return <>
            <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
            </FieldFormUI>
            <PersonalInformationUI {...this.bind(m => m.applicantInformation)}
                addressInfoText={this.getResource("DOC_KOS_ADDRESS_TEXT_2_I")}
                sectionTitle={this.getResourceByProperty(m => m.applicantInformation)}
                required
            />
            <FieldFormUI title={this.getResourceByProperty(m => m.weaponNoticeType)}>
                <div className="row">
                    <div className="form-group col-12">
                        <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.weaponNoticeType, WeaponNoticeType)}</p>
                    </div>
                </div>
            </FieldFormUI>
            <FieldFormUI title={this.getResourceByProperty(m => m.technicalSpecificationsOfWeapons)}>
                <TechnicalSpecificationsOfWeaponsUI {...this.bind(m => m.technicalSpecificationsOfWeapons)} skipWeaponPurpose />
            </FieldFormUI>
            {
                this.model.weaponNoticeType == WeaponNoticeType.Transferred
                    ? <FieldFormUI title={this.getResourceByProperty(m => m.purchaserInformation)}>
                        <div className="row">
                            <div className="form-group col-12">
                                {this.textDisplayFor(m => m.purchaserInformation)}
                            </div>
                        </div>
                    </FieldFormUI>
                    : null
            }
        </>
    }

    @action private onWeaponNoticeTypeChange(e: any): void {

        this.model.purchaserInformation = null;

        if (e.target.value === WeaponNoticeType.Acquired.toString()) {
            this.model.weaponNoticeType = WeaponNoticeType.Acquired;
        } else if (e.target.value === WeaponNoticeType.Transferred.toString()) {
            this.model.weaponNoticeType = WeaponNoticeType.Transferred;
        }
    }
}

export const NotificationForNonFirearmDataUI = withDocumentFormManager(NotificationForNonFirearmDataImpl)