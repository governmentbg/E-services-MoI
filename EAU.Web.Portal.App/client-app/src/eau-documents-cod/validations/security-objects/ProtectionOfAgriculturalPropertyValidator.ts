import { EAUBaseValidator, ResourceHelpers, resourceManager } from "eau-core";
import { DocumentFormValidationContext, ErrMsgCodesConstants } from "eau-documents";
import { ProtectionOfAgriculturalProperty } from "../../models/ModelsAutoGenerated";
import { SecurityTransportRequiredValidator } from "../SecurityTransportValidator";

export class ProtectionOfAgriculturalProperty_NValidator
    extends EAUBaseValidator<ProtectionOfAgriculturalProperty, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.actualDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'actualDate'));

        this.ruleFor(x => x.actualDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));

        this.ruleFor(x => x.securityObjectName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'securityObjectName'));

        this.ruleFor(m => m.securityObjectName).matches("^[а-яА-Яa-zA-Z\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicLatinNumbersSymbols, new ProtectionOfAgriculturalProperty(), 'securityObjectName'));

        this.ruleFor(x => x.securityObjectName).length(1, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new ProtectionOfAgriculturalProperty(), 'securityObjectName', 150));

        this.ruleFor(x => x.address).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'address'));

        this.ruleFor(m => m.address).matches("^[а-яА-Яa-zA-Z\\s+\\d+~@№#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicLatinNumbersSymbols2, new ProtectionOfAgriculturalProperty(), 'address'));

        this.ruleFor(x => x.address).length(1, 250)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new ProtectionOfAgriculturalProperty(), 'address', 250));

        this.ruleFor(x => x.securityType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'securityType'));

        this.ruleFor(x => x.securityTransports).setCollectionValidator(new SecurityTransportRequiredValidator());

        this.ruleFor(x => x.districtCode).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'districtCode'));

    }
}

export class ProtectionOfAgriculturalProperty_TValidator
    extends EAUBaseValidator<ProtectionOfAgriculturalProperty, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.terminationDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'terminationDate'));

        this.ruleFor(x => x.terminationDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));

        this.ruleFor(x => x.securityObjectName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'securityObjectName'));

        this.ruleFor(m => m.securityObjectName).matches("^[а-яА-Яa-zA-Z\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicLatinNumbersSymbols, new ProtectionOfAgriculturalProperty(), 'securityObjectName'));

        this.ruleFor(x => x.securityObjectName).length(1, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new ProtectionOfAgriculturalProperty(), 'securityObjectName', 150));

        this.ruleFor(m => m.address).matches("^[а-яА-Яa-zA-Z\\s+\\d+~@№#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicLatinNumbersSymbols2, new ProtectionOfAgriculturalProperty(), 'address'));

        this.ruleFor(x => x.address).length(1, 250)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new ProtectionOfAgriculturalProperty(), 'address', 250));

        this.ruleFor(x => x.address).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ProtectionOfAgriculturalProperty(), 'address'));
    }
}