import { EAUBaseValidator, ResourceHelpers, resourceManager } from "eau-core";
import { DocumentFormValidationContext, ErrMsgCodesConstants } from "eau-documents";
import { PersonalSecurity, PersonAssignorData } from "../../models/ModelsAutoGenerated";
import { PersonAssignorDataValidator } from "../ContractAssignorValidator";
import { SecurityTransportRequiredValidator } from "../SecurityTransportValidator";
import { ObjectHelper, ValidationHelper } from "cnsys-core";
import moment from "moment";

export class PersonalSecurity_NValidator
    extends EAUBaseValidator<PersonalSecurity, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.actualDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'actualDate'));

        this.ruleFor(x => x.actualDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));

        this.ruleFor(x => x.address).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'address'));

        this.ruleFor(m => m.address).matches("^[а-яА-Яa-zA-Z\\s+\\d+~@№#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicLatinNumbersSymbols2, new PersonalSecurity(), 'address'));

        this.ruleFor(x => x.address).length(1, 250)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new PersonalSecurity(), 'address', 250));

        this.ruleFor(x => x.securityType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'securityType'));

        this.ruleFor(x => x.securityTransports).setCollectionValidator(new SecurityTransportRequiredValidator());

        this.ruleFor(x => x.clothintType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'clothintType'));

        this.ruleFor(x => x.position).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'position'));

        this.ruleFor(x => x.position).length(1, 50)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new PersonalSecurity(), 'position', 50));

        this.ruleFor(m => m.position).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new PersonalSecurity(), 'position'));

        this.ruleFor(x => x.placeOfWork).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'placeOfWork'));

        this.ruleFor(m => m.placeOfWork).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new PersonalSecurity(), 'placeOfWork'));

        this.ruleFor(x => x.placeOfWork).length(1, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new PersonalSecurity(), 'placeOfWork', 150));

        this.ruleFor(x => x.guardedPersonType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'guardedPersonType'));

        this.ruleFor(m => m.guardedPerson).setValidator(new GuardedPersonValidator());
    }
}

export class PersonalSecurity_TValidator
    extends EAUBaseValidator<PersonalSecurity, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.terminationDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'terminationDate'));

        this.ruleFor(x => x.terminationDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));

        this.ruleFor(x => x.guardedPersonType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonalSecurity(), 'guardedPersonType'));

        this.ruleFor(m => m.guardedPerson).setValidator(new PersonAssignorDataValidator());

    }
}

class GuardedPersonValidator
    extends EAUBaseValidator<PersonAssignorData, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.fullName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAssignorData(), 'guardedPersonfullName'));

        this.ruleFor(m => m.fullName).match(/^[а-яА-Я]+([а-яА-Я '-]+[а-яА-Я]){0,1}$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCyrillicNameMustContainsSymbols, PersonAssignorData, 'fullName'));

        this.ruleFor(m => m.fullName).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, PersonAssignorData, 'fullName', 150));

        this.ruleFor(x => x.identifier).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAssignorData(), 'identifier'));

        this.ruleFor(m => m.identifier).length(0, 10)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, PersonAssignorData, 'identifier', 10));

        this.ruleFor(x => x.guardedType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAssignorData(), 'guardedType'));

        this.ruleFor(m => m.identifier).matches("^[0-9]+$")
            .withMessage(resourceManager.getResourceByKey('GL_INVALID_EGNLNCH_L'));
    }
    public validate(obj: PersonAssignorData): boolean {
        let res = super.validate(obj);

        let validIdentifier = true;

        if (!ObjectHelper.isStringNullOrEmpty(obj.identifier)) {
            if (obj.identifier.length == 8) {
                validIdentifier = moment(obj.identifier, 'DDMMYYYY', true).isValid();
                if (validIdentifier)
                    validIdentifier = moment(obj.identifier, 'DDMMYYYY', true).year() >= 1900 && moment(obj.identifier, 'DDMMYYYY', true) <= moment().endOf("day");
            }
            else
                if (obj.identifier.length == 10)
                    validIdentifier = ValidationHelper.isValidEGNLNCh(obj.identifier);
                else
                    validIdentifier = false;
        }

        if (!validIdentifier) {
            obj.addError('identifier', obj.identifier.length == 8 ? resourceManager.getResourceByKey("DOC_GL_InvalidBirthDate_E") : resourceManager.getResourceByKey('GL_INVALID_EGNLNCH_L'));
            res = false;
        }
        return res;
    }
}