import { EAUBaseValidator, ResourceHelpers, resourceManager } from "eau-core";
import { DocumentFormValidationContext, ErrMsgCodesConstants } from "eau-documents";
import { SecurityContractData } from "../models/ModelsAutoGenerated";
import { action } from "mobx";
import { isNotificationForTakingOrRemovingFromSecurityManager } from "../form-managers/NotificationForTakingOrRemovingFromSecurityManager";
import { ObjectHelper } from "../../cnsys-core";
import { DateTime } from "../../cnsys-ui-react";
import moment, { isMoment } from "moment";

export class SecurityContractDataValidator
    extends EAUBaseValidator<SecurityContractData, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.contractDate).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityContractData(), 'contractDate'));

        this.ruleFor(x => x.contractDate).isValidDate()
            .withMessage(resourceManager.getResourceByKey("DOC_GL_WRONG_DATE_AND_TIME_E"));       

        this.ruleFor(x => x.contractType).length(1, 50)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, new SecurityContractData(), 'contractType', 50));

        this.ruleFor(m => m.contractDate).must(m => m.contractDate <= moment().endOf("day"))
            .withMessage(resourceManager.getResourceByKey("DOC_GL_DATE_CANNOT_BE_GREATER_THAN_CURRENT_E"));
    }

    @action validate(obj: SecurityContractData): boolean {

        let isValid = super.validate(obj);
        let ctx = this.getValidationContext();
        let manager = ctx.documentFormManager;

        if (manager && isNotificationForTakingOrRemovingFromSecurityManager(manager)) {
            if (manager.isTerminationNotification() === true) {
                if (ObjectHelper.isStringNullOrEmpty(obj.contractType)) {
                    obj.addError("contractType", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityContractData(), 'contractType'));
                    isValid = false;
                }
                if (ObjectHelper.isStringNullOrEmpty(obj.documentNumber)) {
                    obj.addError("documentNumber", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityContractData(), 'documentNumber'));
                    isValid = false;
                }                
            }
            else {
                if (ObjectHelper.isStringNullOrEmpty(obj.contractNumber)) {
                    obj.addError("contractNumber", ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new SecurityContractData(), 'contractNumber'));
                    isValid = false;
                }
            }                        
        }
       
        return isValid;
    }
}
