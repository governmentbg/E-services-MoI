import { EAUBaseValidator, ResourceHelpers, resourceManager } from "eau-core";
import { DocumentFormValidationContext, ErrMsgCodesConstants } from "eau-documents";
import { ContractAssignor, AssignorPersonEntityType, PersonAssignorData, EntityAssignorData } from "../models/ModelsAutoGenerated";
import moment from "moment";
import { ValidationHelper, ObjectHelper } from "../../cnsys-core";

export class ContractAssignorValidator
    extends EAUBaseValidator<ContractAssignor, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.assignorPersonEntityType).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new ContractAssignor(), 'assignorPersonEntityType'));

        this.ruleFor(m => m.personAssignorData).setValidator(new PersonAssignorDataValidator()).when(m => m.assignorPersonEntityType == AssignorPersonEntityType.Person);

        this.ruleFor(m => m.entityAssignorData).setValidator(new EntityAssignorDataValidator()).when(m => m.assignorPersonEntityType == AssignorPersonEntityType.Entity);

    }
}

export class PersonAssignorDataValidator
    extends EAUBaseValidator<PersonAssignorData, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.fullName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAssignorData(), 'fullName'));

        this.ruleFor(m => m.fullName).match(/^[а-яА-Я]+([а-яА-Я '-]+[а-яА-Я]){0,1}$/)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCyrillicNameMustContainsSymbols, PersonAssignorData, 'fullName'));

        this.ruleFor(m => m.fullName).length(0, 150)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, PersonAssignorData, 'fullName', 150));

        this.ruleFor(x => x.identifier).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new PersonAssignorData(), 'identifier'));

        this.ruleFor(m => m.identifier).length(0, 10)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, PersonAssignorData, 'identifier', 10));

        this.ruleFor(m => m.identifier).matches("^[0-9]+$")
            .withMessage(resourceManager.getResourceByKey('GL_INVALID_EGNLNCH_L'));
    }

    public validate(obj: PersonAssignorData): boolean {
        let res = super.validate(obj);

        let validIdentifier = true;

        if (!ObjectHelper.isStringNullOrEmpty(obj.identifier)) {
            if (obj.identifier.length == 8) {
                validIdentifier = moment(obj.identifier, 'DDMMYYYY', true).isValid();
                if (validIdentifier)
                    validIdentifier = moment(obj.identifier, 'DDMMYYYY', true).year() >= 1900 && moment(obj.identifier, 'DDMMYYYY', true) <= moment().endOf("day");
            }
            else
                if (obj.identifier.length == 10)
                    validIdentifier = ValidationHelper.isValidEGNLNCh(obj.identifier);
                else
                    validIdentifier = false;
        }

        if (!validIdentifier) {
            obj.addError('identifier', obj.identifier.length == 8 ? resourceManager.getResourceByKey("DOC_GL_InvalidBirthDate_E") : resourceManager.getResourceByKey('GL_INVALID_EGNLNCH_L'));
            res = false;
        }
        return res;
    }
}

class EntityAssignorDataValidator
    extends EAUBaseValidator<EntityAssignorData, DocumentFormValidationContext> {

    constructor() {
        super();

        this.ruleFor(x => x.fullName).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new EntityAssignorData(), 'fullName'));

        this.ruleFor(m => m.fullName).matches("^[а-яА-Я\\s+\\d+~@#$%^&*()_{}|\"':>=|!<.,/\\\\?;-]+$")
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldValidationCyrillicNumbersSymbols, new EntityAssignorData(), 'fullName'));

        this.ruleFor(m => m.fullName).length(0, 250)
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.FieldCanNotContainsMoreThanSymbols, EntityAssignorData, 'fullName', 250));

        this.ruleFor(x => x.identifier).notEmpty()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.DefaultNotEmptyErrorMessage, new EntityAssignorData(), 'identifier'));

        this.ruleFor(x => x.identifier).isValidBULSTAT()
            .withMessage(ResourceHelpers.formatErrorMessage(ErrMsgCodesConstants.InvalidBULSTATAndEIK, new EntityAssignorData(), 'identifier'));
    }
}