import { BaseProps, ViewMode } from "cnsys-ui-react";
import { EAUBaseComponent, ResourceHelpers } from "eau-core";
import { ApplicationFormManagerProps, ApplicationType, FieldFormUI, PoliceDepartmentUI, withDocumentFormManager } from "eau-documents";
import { action } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { PoliceDepartment } from "../../../eau-documents/models";
import { ContractType, Employee, EmployeeIdentifierType, NewEmployeeRequest, NotificationForConcludingOrTerminatingEmploymentContractDataVM, NotificationOfEmploymentContractType, RemoveEmployeeRequest } from "../../models/ModelsAutoGenerated";
import { NewEmployeeRequestsUI } from "../field-forms/NewEmployeeRequestsUI";
import { RemoveEmployeeRequestsUI } from "../field-forms/RemoveEmployeeRequestsUI";

interface NotificationForConcludingOrTerminatingEmploymentContractDataProps extends BaseProps, ApplicationFormManagerProps {
}

@observer export class NotificationForConcludingOrTerminatingEmploymentContractDataImpl
    extends EAUBaseComponent<NotificationForConcludingOrTerminatingEmploymentContractDataProps, NotificationForConcludingOrTerminatingEmploymentContractDataVM> {

    constructor(props: NotificationForConcludingOrTerminatingEmploymentContractDataProps) {
        super(props)

        this.onContractTypeChange = this.onContractTypeChange.bind(this);

    }

    renderEdit(): JSX.Element {
        return (
            <>
                {
                    this.props.documentFormManager.applicationType != ApplicationType.AppForFirstReg
                        ? <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                            <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment, ViewMode.Display)} />
                        </FieldFormUI>
                        : <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)} required>
                            <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
                        </FieldFormUI>
                }
                <FieldFormUI title={this.getResourceByProperty(m => m.notificationOfEmploymentContractType)}>
                    {this.radioButtonListFor(m => m.notificationOfEmploymentContractType, ResourceHelpers.getSelectListItemsForEnum(NotificationOfEmploymentContractType), null, this.onContractTypeChange)}
                </FieldFormUI>
                {
                    this.model.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Concluding
                        ? <FieldFormUI title={this.getResourceByProperty(m => m.newEmployeeRequests)}>
                            <NewEmployeeRequestsUI {...this.bind(m => m.newEmployeeRequests)} />
                        </FieldFormUI>
                        : <FieldFormUI title={this.getResourceByProperty(m => m.removeEmployeeRequests)}>
                            <RemoveEmployeeRequestsUI {...this.bind(m => m.removeEmployeeRequests)} />
                        </FieldFormUI>
                }
            </>
        );
    }

    renderDisplay(): JSX.Element {
        return (
            <>
                <FieldFormUI title={this.getResourceByProperty(m => m.issuingPoliceDepartment)}>
                    <PoliceDepartmentUI {...this.bind(m => m.issuingPoliceDepartment)} />
                    {this.propertyErrorsDispleyFor(m => m.issuingPoliceDepartment)}
                </FieldFormUI>
                <FieldFormUI title={this.getResourceByProperty(m => m.notificationOfEmploymentContractType)}>
                    <div className="row">
                        <div className="form-group col-12">
                            <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.notificationOfEmploymentContractType, NotificationOfEmploymentContractType)}</p>
                        </div>
                    </div>
                </FieldFormUI>
                {
                    this.model.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Concluding
                        ? <FieldFormUI title={this.getResourceByProperty(m => m.newEmployeeRequests)}>
                            <NewEmployeeRequestsUI {...this.bind(m => m.newEmployeeRequests)} />
                        </FieldFormUI>
                        : <FieldFormUI title={this.getResourceByProperty(m => m.removeEmployeeRequests)}>
                            <RemoveEmployeeRequestsUI {...this.bind(m => m.removeEmployeeRequests)} />
                        </FieldFormUI>
                }
            </>
        );
    }

    //#region handlers 

    private onContractTypeChange(e: any) {
        this.initEmployeeRequests();
    }

    @action private initEmployeeRequests() {

        this.model.newEmployeeRequests = null;
        this.model.removeEmployeeRequests = null

        if (this.model.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Concluding) {
            this.model.newEmployeeRequests = [this.initNewEmployeeRequest()];

        } else if (this.model.notificationOfEmploymentContractType == NotificationOfEmploymentContractType.Terminating) {
            this.model.removeEmployeeRequests = [this.initRemoveEmployeeRequest()];
        }
    }

    @action private initNewEmployeeRequest(): NewEmployeeRequest {
        let newEmployeeRequest = new NewEmployeeRequest();
        newEmployeeRequest.employee = new Employee();
        newEmployeeRequest.employee.employeeIdentifierType = EmployeeIdentifierType.EGN;
        newEmployeeRequest.contractType = ContractType.Unlimited;

        return newEmployeeRequest;
    }

    @action private initRemoveEmployeeRequest(): RemoveEmployeeRequest {
        var removeEmployeeRequest = new RemoveEmployeeRequest();
        removeEmployeeRequest.employee = new Employee();
        removeEmployeeRequest.employee.employeeIdentifierType = EmployeeIdentifierType.EGN;

        return removeEmployeeRequest;
    }

    //#endregion
}

export const NotificationForConcludingOrTerminatingEmploymentContractDataUI = withDocumentFormManager(NotificationForConcludingOrTerminatingEmploymentContractDataImpl);