import { SelectListItem } from "cnsys-core";
import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlRequiredLabel, Constants, EAUBaseComponent, ResourceHelpers, attributesClassFormControlLabel } from "eau-core";
import { action } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { SecurityObjectTransportUI } from "..";
import { AccessRegimeType, ControlType, SecurityType, SelfProtectionPersonsProperty, SecurityTransport } from "../../../models/ModelsAutoGenerated";
import { withDocumentFormManager, ApplicationFormManagerProps } from "eau-documents";
import { isNotificationForTakingOrRemovingFromSecurityManager } from "../../../form-managers/NotificationForTakingOrRemovingFromSecurityManager";

interface SecurityObjectType4Props extends BaseProps, ApplicationFormManagerProps {
    isForTermination: boolean
}

@observer export class SecurityObjectType4Impl extends EAUBaseComponent<SecurityObjectType4Props, SelfProtectionPersonsProperty>{
    private securityTransportItems: SelectListItem[];

    constructor(props: SecurityObjectType4Props) {
        super(props);

        //Bind
        this.onRadioChange = this.onRadioChange.bind(this);

        //Init

        if (!this.model.hasTransport)
            this.model.hasTransport = false;

        if (isNotificationForTakingOrRemovingFromSecurityManager(this.props.documentFormManager)) {

            if (this.props.isForTermination && !this.model.terminationDate) {
                this.model.terminationDate = this.props.documentFormManager.getActualDate();
            }
            if (!this.props.isForTermination && !this.model.actualDate) {
                this.model.actualDate = this.props.documentFormManager.getActualDate();
            }
        }

        this.securityTransportItems = [
            new SelectListItem({
                value: 0,
                text: this.getResource("GL_HAVE_NOT")
            }),
            new SelectListItem({
                value: 1,
                text: this.getResource("GL_HAVE")
            })
        ];
    }

    renderEdit(): JSX.Element {
        return this.props.isForTermination ? this.renderTerminationEditUI() : this.renderEditUI()
    }

    renderDisplay(): JSX.Element {
        return this.props.isForTermination ? this.renderTerminationDisplayUI() : this.renderDisplayUI()

    }

    renderEditUI() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.actualDate, null, attributesClassFormControlRequiredLabel)}
                        <div className="input-group date-control">
                            {this.dateFor(m => m.actualDate)}
                        </div>
                        <div className="sr-only" id="HELP_P-4">Попълнете две цифри за дата, две цифри за месец и четири цифри за година. Разделете цифрите за дата, месец и година с точка.</div>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-md">
                        {this.labelFor(m => m.securityObjectName, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.securityObjectName)}
                    </div>
                    <div className="form-group col-12">
                        {this.labelFor(m => m.address, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.address)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(m => m.securityType, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.securityType, ResourceHelpers.getSelectListItemsForEnum(SecurityType), null, null, true, this.getResource('GL_DDL_CHOICE_L'))}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label">{this.getResourceByProperty(m => m.securityTransports)}</legend>
                            <div className="custom-control custom-radio">
                                {this.radioButtonListFor(m => m.hasTransport, this.securityTransportItems, null, this.onRadioChange)}
                            </div>
                        </fieldset>
                    </div>
                </div>
                {this.model.hasTransport === true ?
                    <div className="list-fileds-group" id="TRANSPORT">
                        <SecurityObjectTransportUI {...this.bind(m => m.securityTransports)} isRequired={true} /></div>
                    : null}
                <div className="row">
                    <div className="form-group col-lg-6">
                        {this.labelFor(m => m.accessRegimeType, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.accessRegimeType, ResourceHelpers.getSelectListItemsForEnum(AccessRegimeType), null, null, true, this.getResource('GL_DDL_CHOICE_L'))}
                    </div>
                    <div className="form-group col-lg-6">
                        {this.labelFor(m => m.controlType, null, attributesClassFormControlRequiredLabel)}
                        {this.dropDownListFor(m => m.controlType, ResourceHelpers.getSelectListItemsForEnum(ControlType), null, null, true, this.getResource('GL_DDL_CHOICE_L'))}
                    </div>
                </div>
            </>
        )
    }

    renderTerminationEditUI() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        {this.labelFor(m => m.terminationDate, null, attributesClassFormControlRequiredLabel)}
                        <div className="input-group date-control">
                            <div className="input-group date-control">
                                {this.dateFor(m => m.terminationDate)}
                            </div>
                            <div className="sr-only" id="HELP_P-2">Попълнете две цифри за дата, две цифри за месец и четири цифри за година. Разделете цифрите за дата, месец и година с точка.</div>
                        </div>
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-md">
                        {this.labelFor(m => m.securityObjectName, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.securityObjectName)}
                    </div>
                    <div className="form-group col-12">
                        {this.labelFor(m => m.address, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(m => m.address)}
                    </div>
                </div>
            </>
        )
    }

    renderDisplayUI() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.actualDate)}</h4>
                        {this.dateDisplayFor(this.model.actualDate, Constants.DATE_FORMATS.date)}
                        {this.propertyErrorsDispleyFor(m => m.actualDate)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.securityObjectName)}</h4>
                        {this.textDisplayFor(m => m.securityObjectName)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.address)}</h4>
                        {this.textDisplayFor(m => m.address)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 col-xl-6">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.securityType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.securityType, SecurityType)}
                        {this.propertyErrorsDispleyFor(m => m.securityType)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.securityTransports)}</h4>
                        {this.model.hasTransport === true ?
                            this.getResource("GL_HAVE")
                            : this.getResource("GL_HAVE_NOT")
                        }
                    </div>
                </div>
                {this.model.hasTransport === true ?
                    <div className="list-fileds-group"><SecurityObjectTransportUI {...this.bind(m => m.securityTransports)} /></div>
                    : null
                }
                <div className="row">
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.accessRegimeType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.accessRegimeType, AccessRegimeType)}
                        {this.propertyErrorsDispleyFor(m => m.accessRegimeType)}
                    </div>
                    <div className="form-group col-sm-6 col-xl-4">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.controlType)}</h4>
                        {ResourceHelpers.getResourceByEmun(this.model.controlType, ControlType)}
                        {this.propertyErrorsDispleyFor(m => m.controlType)}
                    </div>
                </div>
            </>
        )
    }

    renderTerminationDisplayUI() {
        return (
            <>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.terminationDate)}</h4>
                        {this.dateDisplayFor(this.model.terminationDate, Constants.DATE_FORMATS.date)}
                        {this.propertyErrorsDispleyFor(m => m.terminationDate)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.securityObjectName)}</h4>
                        {this.textDisplayFor(m => m.securityObjectName)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <h4 className="form-control-label">{this.getResourceByProperty(m => m.address)}</h4>
                        {this.textDisplayFor(m => m.address)}
                    </div>
                </div>
            </>
        )
    }

    @action private onRadioChange(e: any): void {
        this.model.securityTransports = [];

        if (e.target.value == 1) {
            this.model.hasTransport = e.target.value == 1;
            this.model.securityTransports.push(new SecurityTransport())
        }
    }
}

export const SecurityObjectType4 = withDocumentFormManager(SecurityObjectType4Impl);