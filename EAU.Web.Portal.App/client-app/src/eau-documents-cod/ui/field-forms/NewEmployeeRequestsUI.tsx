import { BaseProps } from "cnsys-ui-react";
import { attributesClassFormControlLabel, attributesClassFormControlReqired, attributesClassFormControlRequiredLabel, Constants, EAUBaseComponent, ResourceHelpers } from "eau-core";
import { withCollectionItems } from "eau-documents";
import React from "react";
import { ContractType, Employee, EmployeeIdentifierType, NewEmployeeRequest } from "../../models/ModelsAutoGenerated";
import { EmployeeUI } from "./EmployeeUI";

class NewEmployeeRequestsImpl extends EAUBaseComponent<BaseProps, NewEmployeeRequest>{

    constructor(props: BaseProps) {
        super(props);

        this.onContractTypeChange = this.onContractTypeChange.bind(this);
    }

    renderEdit() {
        return (
            <>
                <EmployeeUI {...this.bind(x => x.employee)} />
                <div className="row">
                    <div className="form-group col-sm-6 col-xl-7">
                        {this.labelFor(x => x.contractNumber, null, attributesClassFormControlRequiredLabel)}
                        {this.textBoxFor(x => x.contractNumber, attributesClassFormControlReqired)}
                    </div>
                    <div className="form-group col-sm">
                        {this.labelFor(x => x.contractDate, null, attributesClassFormControlRequiredLabel)}
                        {this.dateFor(x => x.contractDate)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-12">
                        <fieldset>
                            <legend className="form-control-label">{this.getResourceByProperty(x => x.contractType)}</legend>
                            {this.radioButtonListFor(m => m.contractType, ResourceHelpers.getSelectListItemsForEnum(ContractType), null, this.onContractTypeChange)}
                        </fieldset>
                    </div>
                </div>
                {
                    this.model.contractType == ContractType.ForPeriod
                        ? <div className="row">
                            <div className="form-group col-sm-6 col-lg-4">
                                {this.labelFor(x => x.contractPeriodInMonths, null, attributesClassFormControlRequiredLabel)}
                                {this.textBoxFor(x => x.contractPeriodInMonths, attributesClassFormControlReqired)}
                            </div>
                        </div>
                        : null
                }
            </>
        );
    }

    renderDisplay() {
        return (
            <>
                <EmployeeUI {...this.bind(x => x.employee)} />
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.contractNumber, null, attributesClassFormControlLabel)}
                        {this.textDisplayFor(x => x.contractNumber)}
                    </div>
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.contractDate, null, attributesClassFormControlLabel)}
                        <p className="field-text">{this.dateDisplayFor(this.model.contractDate, Constants.DATE_FORMATS.date)}</p>
                        {this.propertyErrorsDispleyFor(m => m.contractDate)}
                    </div>
                </div>
                <div className="row">
                    <div className="form-group col-sm-6">
                        {this.labelFor(x => x.contractType, null, attributesClassFormControlLabel)}
                        <p className="field-text">{ResourceHelpers.getResourceByEmun(this.model.contractType, ContractType)}</p>
                    </div>
                    {
                        this.model.contractType == ContractType.ForPeriod
                            ? <div className="form-group col-sm-6">
                                {this.labelFor(x => x.contractPeriodInMonths, null, attributesClassFormControlLabel)}
                                {this.textDisplayFor(x => x.contractPeriodInMonths)}
                            </div>
                            : null
                    }
                </div>
            </>
        );
    };

    private onContractTypeChange() {
        this.model.contractPeriodInMonths = null;
    }
}

export const NewEmployeeRequestsUI = withCollectionItems(NewEmployeeRequestsImpl, {
    initItem: () => {
        let newEmployeeRequest = new NewEmployeeRequest();
        newEmployeeRequest.employee = new Employee();
        newEmployeeRequest.employee.employeeIdentifierType = EmployeeIdentifierType.EGN;
        newEmployeeRequest.contractType = ContractType.Unlimited;

        return newEmployeeRequest;
    },
    addButtonLabelKey: 'GL_ADD_EMPLOYEE_CONTRACT_L'
})